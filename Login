using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace LoginDemo;

public sealed class LoginViewModel : INotifyPropertyChanged
{
    string _userName = string.Empty;
    string _password = string.Empty;
    bool   _isPasswordVisible;

    public string UserName
    {
        get => _userName;
        set => Set(ref _userName, value);
    }

    public string Password
    {
        get => _password;
        set => Set(ref _password, value);
    }

    public bool IsPasswordVisible
    {
        get => _isPasswordVisible;
        set { Set(ref _isPasswordVisible, value); OnPropertyChanged(nameof(ToggleText)); }
    }

    public string ToggleText => IsPasswordVisible ? "🙈 Hide" : "👁 Show";

    public ICommand ToggleCommand { get; }

    public LoginViewModel() =>
        ToggleCommand = new RelayCommand(_ => IsPasswordVisible = !IsPasswordVisible);

    #region INotifyPropertyChanged
    public event PropertyChangedEventHandler? PropertyChanged;
    void OnPropertyChanged([CallerMemberName] string? n = null) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(n));
    bool Set<T>(ref T field, T value, [CallerMemberName] string? n = null)
    {
        if (Equals(field, value)) return false;
        field = value; OnPropertyChanged(n); return true;
    }
    #endregion

    #region RelayCommand (4 lines)
    sealed class RelayCommand(System.Action<object?> exec) : ICommand
    {
        public bool CanExecute(object? _) => true;
        public void Execute(object? p)    => exec(p);
        public event System.EventHandler? CanExecuteChanged { add { } remove { } }
    }
    #endregion
}
